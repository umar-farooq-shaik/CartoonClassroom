import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { insertUserSchema, insertStorySchema, insertTextbookSchema } from "@shared/schema";
import { z } from "zod";

export async function registerRoutes(app: Express): Promise<Server> {
  // User routes
  app.post("/api/users", async (req, res) => {
    try {
      // Create user directly for demo authentication
      const user = {
        id: 1,
        externalId: 'demo_user_123',
        name: req.body.name || 'Student',
        age: parseInt(req.body.age) || 10,
        class: req.body.class || '5th Grade',
        location: req.body.location || 'Unknown',
        favoriteCartoons: req.body.favoriteCartoons || [],
        createdAt: new Date()
      };
      
      res.json(user);
    } catch (error) {
      console.log('User creation error:', error);
      res.status(400).json({ error: "Failed to create user profile" });
    }
  });

  app.get("/api/users/demo/:externalId", async (req, res) => {
    try {
      // For demo mode, return a default user
      const user = {
        id: 1,
        externalId: req.params.externalId,
        name: "Student",
        age: 10,
        class: "5th Grade",
        location: "CartoonClassroom",
        favoriteCartoons: ["SpongeBob", "Pokemon"],
        createdAt: new Date()
      };
      res.json(user);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch user" });
    }
  });

  app.get("/api/users/:id", async (req, res) => {
    try {
      const user = await storage.getUser(parseInt(req.params.id));
      if (!user) {
        return res.status(404).json({ error: "User not found" });
      }
      res.json(user);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch user" });
    }
  });

  app.put("/api/users/:id", async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const updates = insertUserSchema.partial().parse(req.body);
      const user = await storage.updateUser(userId, updates);
      res.json(user);
    } catch (error) {
      res.status(400).json({ error: error instanceof Error ? error.message : "Invalid update data" });
    }
  });

  // Story generation using Gemini API
  app.post("/api/stories/generate", async (req, res) => {
    try {
      const { topic, subject, userId, userPreferences } = req.body;
      
      if (!topic || !subject || !userId) {
        return res.status(400).json({ error: "Topic, subject, and userId are required" });
      }

      // Create a default user for story generation
      const user = {
        id: userId,
        externalId: "demo_user_123",
        name: "Student",
        age: 10,
        class: "5th Grade",
        location: "CartoonClassroom",
        favoriteCartoons: ["SpongeBob", "Pokemon", "Dora"],
        createdAt: new Date()
      };

      // For now, we'll create educational stories directly
      // You can provide your Gemini API key later to get AI-generated content

      // Create prompt for Gemini API
      const prompt = `Create an educational comic story for a ${user.age} year old child in class ${user.class} about ${topic} in ${subject}. 
      The child's favorite cartoons are: ${user.favoriteCartoons.join(", ")}.
      
      Create a story with 4 panels that teaches the concept through fun characters. Each panel should have:
      - A character name and emoji
      - Educational dialogue that explains the concept
      - Make it engaging and age-appropriate
      
      Format the response as a JSON object with:
      {
        "title": "Story title",
        "panels": [
          {
            "character": "😊",
            "characterName": "Character Name",
            "text": "Educational dialogue",
            "background": "bg-yellow-50"
          }
        ]
      }`;

      // Call Gemini API
      const geminiResponse = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${geminiApiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }]
        })
      });

      if (!geminiResponse.ok) {
        console.error('Gemini API error:', await geminiResponse.text());
        return res.status(500).json({ error: "Failed to generate story from Gemini API" });
      }

      const geminiData = await geminiResponse.json();
      
      if (!geminiData.candidates || geminiData.candidates.length === 0) {
        return res.status(500).json({ error: "No story generated by Gemini API" });
      }

      const storyText = geminiData.candidates[0].content.parts[0].text;
      
      // Try to parse JSON from the response
      let storyData;
      try {
        // Clean the response to extract JSON
        const jsonMatch = storyText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          storyData = JSON.parse(jsonMatch[0]);
        } else {
          throw new Error("No JSON found in response");
        }
      } catch (parseError) {
        // Fallback: create a basic story structure
        // Educational story library with comprehensive curriculum
        const educationalStories = {
          Math: {
            Addition: {
              title: "Addition Adventure with SpongeBob",
              panels: [
                {
                  character: "SpongeBob",
                  characterName: "SpongeBob SquarePants",
                  text: "Hi! I'm SpongeBob and I love making Krabby Patties! Let's learn addition by counting ingredients!",
                  background: "Krusty Krab kitchen with colorful ingredients"
                },
                {
                  character: "SpongeBob",
                  characterName: "SpongeBob SquarePants", 
                  text: "I have 2 pickles and Patrick brings me 3 more pickles. How many pickles do I have now?",
                  background: "Kitchen counter showing 2 + 3 pickles"
                },
                {
                  character: "Patrick",
                  characterName: "Patrick Star",
                  text: "Let me count! 2 pickles... plus 3 more pickles... that's 5 pickles total!",
                  background: "Patrick counting 5 pickles lined up"
                },
                {
                  character: "SpongeBob",
                  characterName: "SpongeBob SquarePants",
                  text: "Exactly! 2 + 3 = 5! Addition means putting groups together to find the total!",
                  background: "SpongeBob showing '2 + 3 = 5' equation"
                }
              ]
            },
            Multiplication: {
              title: "Multiplication Magic with Pokemon",
              panels: [
                {
                  character: "Pikachu",
                  characterName: "Pikachu",
                  text: "Pika pika! Let's learn multiplication by organizing Pokemon cards in groups!",
                  background: "Room with Pokemon cards in organized groups"
                },
                {
                  character: "Ash",
                  characterName: "Ash Ketchum",
                  text: "I have 3 rows of Pokemon cards, and each row has 4 cards. How many cards total?",
                  background: "Table showing 3 rows of 4 cards each"
                },
                {
                  character: "Pikachu", 
                  characterName: "Pikachu",
                  text: "Let's count! Row 1: 4 cards, Row 2: 4 cards, Row 3: 4 cards. That's 4 + 4 + 4!",
                  background: "Pikachu pointing at each row"
                },
                {
                  character: "Ash",
                  characterName: "Ash Ketchum",
                  text: "Great! 3 groups of 4 equals 12 cards total. We write this as 3 × 4 = 12!",
                  background: "Ash showing equation 3 × 4 = 12"
                }
              ]
            }
          },
          Science: {
            "Water Cycle": {
              title: "Water Cycle Journey with Dora",
              panels: [
                {
                  character: "Dora",
                  characterName: "Dora the Explorer",
                  text: "¡Hola! I'm Dora! Today we're going on an adventure to learn about the water cycle!",
                  background: "Sunny landscape with rivers and clouds"
                },
                {
                  character: "Boots",
                  characterName: "Boots the Monkey",
                  text: "Look Dora! The sun heats the water in the river. The water turns into invisible water vapor!",
                  background: "River with evaporation arrows going up"
                },
                {
                  character: "Dora",
                  characterName: "Dora the Explorer", 
                  text: "That's evaporation! The water vapor rises and forms clouds when it gets cold in the sky!",
                  background: "Water vapor forming fluffy clouds"
                },
                {
                  character: "Boots",
                  characterName: "Boots the Monkey",
                  text: "When clouds get heavy, water falls as rain! The cycle starts again!",
                  background: "Rain falling back to complete the cycle"
                }
              ]
            },
            Photosynthesis: {
              title: "Plant Power with Adventure Time",
              panels: [
                {
                  character: "Finn",
                  characterName: "Finn the Human",
                  text: "Adventure time! Jake and I are learning how plants make their own food!",
                  background: "Colorful forest with various plants"
                },
                {
                  character: "Jake",
                  characterName: "Jake the Dog",
                  text: "Plants are like nature's chefs! They use sunlight, water, and air to make glucose!",
                  background: "Tree with sun rays hitting green leaves"
                },
                {
                  character: "Finn",
                  characterName: "Finn the Human",
                  text: "Green chlorophyll in leaves captures sunlight energy. It's like plant solar panels!",
                  background: "Close-up of leaves with sparkles"
                },
                {
                  character: "Jake",
                  characterName: "Jake the Dog",
                  text: "And oxygen comes out as a bonus! Plants feed themselves AND help us breathe!",
                  background: "Happy tree releasing oxygen bubbles"
                }
              ]
            }
          },
          English: {
            Storytelling: {
              title: "Story Structure with Frozen",
              panels: [
                {
                  character: "Elsa",
                  characterName: "Queen Elsa",
                  text: "Hello! Every great story has three parts: beginning, middle, and end!",
                  background: "Magical ice castle library"
                },
                {
                  character: "Anna",
                  characterName: "Princess Anna",
                  text: "The beginning introduces characters and setting. Like when we first met in Arendelle!",
                  background: "Arendelle castle with young sisters"
                },
                {
                  character: "Elsa",
                  characterName: "Queen Elsa",
                  text: "The middle has the main adventure or problem. Like when I froze everything!",
                  background: "Dramatic winter scene with ice magic"
                },
                {
                  character: "Anna",
                  characterName: "Princess Anna",
                  text: "The end resolves everything! We learned that love can overcome any challenge!",
                  background: "Happy ending with sisters hugging"
                }
              ]
            }
          },
          Social: {
            Community: {
              title: "Community Helpers with Paw Patrol",
              panels: [
                {
                  character: "Ryder",
                  characterName: "Ryder",
                  text: "PAW Patrol is ready! Let's learn about important jobs people do in our community!",
                  background: "Adventure Bay with community buildings"
                },
                {
                  character: "Marshall",
                  characterName: "Marshall",
                  text: "I'm a firefighter pup! Firefighters keep people safe and put out fires!",
                  background: "Fire station with Marshall's fire truck"
                },
                {
                  character: "Chase",
                  characterName: "Chase",
                  text: "I'm a police pup! Police officers help keep our community safe!",
                  background: "Police station with Chase's police car"
                },
                {
                  character: "Ryder",
                  characterName: "Ryder",
                  text: "Every job is important! Teachers, doctors, farmers all help make our community great!",
                  background: "Community scene with various helpers"
                }
              ]
            }
          }
        };

        storyData = educationalStories[subject]?.[topic] || {
          title: `Learning ${topic} Adventure`,
          panels: [
            {
              character: user.favoriteCartoons[0] || "SpongeBob",
              characterName: user.favoriteCartoons[0] || "SpongeBob SquarePants",
              text: `Hi! Let's explore ${topic} together! This is going to be so much fun!`,
              background: "Colorful classroom with educational materials"
            },
            {
              character: user.favoriteCartoons[0] || "SpongeBob", 
              characterName: user.favoriteCartoons[0] || "SpongeBob SquarePants",
              text: `${topic} is really amazing! There's so much to discover and learn!`,
              background: "Adventure scene exploring the topic"
            },
            {
              character: user.favoriteCartoons[0] || "SpongeBob",
              characterName: user.favoriteCartoons[0] || "SpongeBob SquarePants", 
              text: `Great job learning about ${topic}! You're doing amazing and I'm so proud of you!`,
              background: "Celebration scene with confetti and cheers"
            }
          ]
        };
      }

      // Return the generated story directly for demo
      const storyResponse = {
        id: Math.floor(Math.random() * 1000),
        userId,
        subject,
        topic,
        title: storyData.title,
        content: JSON.stringify(storyData),
        panels: storyData.panels,
        isLearned: false,
        createdAt: new Date()
      };

      res.json(storyResponse);
    } catch (error) {
      console.error('Story generation error:', error);
      res.status(500).json({ error: "Failed to generate story" });
    }
  });

  // Save story progress
  app.post("/api/stories/save", async (req, res) => {
    try {
      const { storyId, isLearned } = req.body;
      
      // For demo mode, just return success
      res.json({ success: true, storyId, isLearned });
    } catch (error) {
      res.status(500).json({ error: "Failed to save story progress" });
    }
  });

      // Update user progress
      const progress = await storage.getUserProgress(userId);
      if (progress) {
        const currentSubjectProgress = progress.subjectProgress[subject] || {
          storiesCompleted: 0,
          topicsLearned: [],
          timeSpent: 0
        };

        const updatedSubjectProgress = {
          ...progress.subjectProgress,
          [subject]: {
            ...currentSubjectProgress,
            storiesCompleted: currentSubjectProgress.storiesCompleted + 1,
            topicsLearned: [...new Set([...currentSubjectProgress.topicsLearned, topic])],
            timeSpent: currentSubjectProgress.timeSpent + 5 // Assume 5 minutes per story
          }
        };

        await storage.updateUserProgress(userId, {
          totalStoriesRead: progress.totalStoriesRead + 1,
          totalTimeSpent: progress.totalTimeSpent + 5,
          subjectProgress: updatedSubjectProgress,
          lastActiveDate: new Date()
        });

        // Check for achievements
        const totalStories = progress.totalStoriesRead + 1;
        const userAchievements = await storage.getAchievementsByUser(userId);
        const achievementTypes = userAchievements.map(a => a.type);

        // First story achievement
        if (totalStories === 1 && !achievementTypes.includes('first_story')) {
          await storage.createAchievement({
            userId,
            type: 'first_story',
            name: 'First Adventure',
            description: 'Completed your very first story!',
            icon: '🎯'
          });
        }

        // Subject master achievements
        const subjectStoriesCount = updatedSubjectProgress[subject].storiesCompleted;
        if (subjectStoriesCount >= 5 && !achievementTypes.includes(`${subject.toLowerCase()}_master`)) {
          await storage.createAchievement({
            userId,
            type: `${subject.toLowerCase()}_master`,
            name: `${subject} Master`,
            description: `Completed 5 stories in ${subject}!`,
            icon: subject === 'Math' ? '🧮' : subject === 'Science' ? '🔬' : '📖'
          });
        }
      }

      res.json(savedStory);
    } catch (error) {
      console.error('Story generation error:', error);
      res.status(500).json({ error: "Failed to generate story" });
    }
  });

  // Story routes
  app.get("/api/stories/user", async (req, res) => {
    try {
      // For demo mode, return sample stories or empty array
      const stories = [];
      res.json(stories);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch stories" });
    }
  });

  app.get("/api/stories/user/:userId", async (req, res) => {
    try {
      const stories = await storage.getStoriesByUser(parseInt(req.params.userId));
      res.json(stories);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch stories" });
    }
  });

  app.get("/api/stories/user/:userId/subject/:subject", async (req, res) => {
    try {
      const stories = await storage.getStoriesBySubject(
        parseInt(req.params.userId),
        req.params.subject
      );
      res.json(stories);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch stories" });
    }
  });

  app.get("/api/stories/:id", async (req, res) => {
    try {
      const story = await storage.getStory(parseInt(req.params.id));
      if (!story) {
        return res.status(404).json({ error: "Story not found" });
      }
      res.json(story);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch story" });
    }
  });

  app.put("/api/stories/:id", async (req, res) => {
    try {
      const storyId = parseInt(req.params.id);
      const updates = insertStorySchema.partial().parse(req.body);
      const story = await storage.updateStory(storyId, updates);
      res.json(story);
    } catch (error) {
      res.status(400).json({ error: error instanceof Error ? error.message : "Invalid update data" });
    }
  });

  // Textbook routes
  app.get("/api/textbooks/user/:userId", async (req, res) => {
    try {
      const textbooks = await storage.getTextbooksByUser(parseInt(req.params.userId));
      res.json(textbooks);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch textbooks" });
    }
  });

  app.post("/api/textbooks", async (req, res) => {
    try {
      const textbookData = insertTextbookSchema.parse(req.body);
      const textbook = await storage.createTextbook(textbookData);
      res.json(textbook);
    } catch (error) {
      res.status(400).json({ error: error instanceof Error ? error.message : "Invalid textbook data" });
    }
  });

  app.post("/api/textbooks/:id/stories/:storyId", async (req, res) => {
    try {
      const textbookId = parseInt(req.params.id);
      const storyId = parseInt(req.params.storyId);
      const textbook = await storage.addStoryToTextbook(textbookId, storyId);
      res.json(textbook);
    } catch (error) {
      res.status(400).json({ error: "Failed to add story to textbook" });
    }
  });

  // Achievement routes
  app.get("/api/achievements/user/:userId", async (req, res) => {
    try {
      const achievements = await storage.getAchievementsByUser(parseInt(req.params.userId));
      res.json(achievements);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch achievements" });
    }
  });

  // Progress routes
  app.get("/api/progress/user/:userId", async (req, res) => {
    try {
      const progress = await storage.getUserProgress(parseInt(req.params.userId));
      if (!progress) {
        return res.status(404).json({ error: "Progress not found" });
      }
      res.json(progress);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch progress" });
    }
  });

  // Chatbot route (simple responses for now)
  app.post("/api/chatbot", async (req, res) => {
    try {
      const { message, context } = req.body;
      
      // Simple rule-based responses for educational questions
      const responses = {
        fraction: "Great question about fractions! Think of fractions like sharing pizza. If you cut a pizza into 4 equal pieces and take 1 piece, you have 1/4 of the pizza! 🍕",
        math: "Math is all around us! It helps us count, measure, and solve problems. What specific math topic would you like to learn about?",
        science: "Science helps us understand how the world works! From why the sky is blue to how plants grow. What interests you most?",
        default: "That's a wonderful question! I'm here to help you learn. Can you tell me more about what you're trying to understand?"
      };

      let response = responses.default;
      const lowerMessage = message.toLowerCase();

      if (lowerMessage.includes('fraction')) {
        response = responses.fraction;
      } else if (lowerMessage.includes('math') || lowerMessage.includes('number')) {
        response = responses.math;
      } else if (lowerMessage.includes('science')) {
        response = responses.science;
      }

      res.json({ response });
    } catch (error) {
      res.status(500).json({ error: "Failed to process question" });
    }
  });

  const httpServer = createServer(app);
  return httpServer;
}

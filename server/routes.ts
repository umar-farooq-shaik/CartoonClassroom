import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { insertUserSchema, insertStorySchema, insertTextbookSchema } from "@shared/schema";
import { z } from "zod";

export async function registerRoutes(app: Express): Promise<Server> {
  // User routes
  app.post("/api/users", async (req, res) => {
    try {
      const userData = insertUserSchema.parse(req.body);
      const user = await storage.createUser(userData);
      res.json(user);
    } catch (error) {
      res.status(400).json({ error: error instanceof Error ? error.message : "Invalid user data" });
    }
  });

  app.get("/api/users/firebase/:firebaseUid", async (req, res) => {
    try {
      const user = await storage.getUserByFirebaseUid(req.params.firebaseUid);
      if (!user) {
        return res.status(404).json({ error: "User not found" });
      }
      res.json(user);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch user" });
    }
  });

  app.get("/api/users/:id", async (req, res) => {
    try {
      const user = await storage.getUser(parseInt(req.params.id));
      if (!user) {
        return res.status(404).json({ error: "User not found" });
      }
      res.json(user);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch user" });
    }
  });

  app.put("/api/users/:id", async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const updates = insertUserSchema.partial().parse(req.body);
      const user = await storage.updateUser(userId, updates);
      res.json(user);
    } catch (error) {
      res.status(400).json({ error: error instanceof Error ? error.message : "Invalid update data" });
    }
  });

  // Story generation using Gemini API
  app.post("/api/stories/generate", async (req, res) => {
    try {
      const { topic, subject, userId, userPreferences } = req.body;
      
      if (!topic || !subject || !userId) {
        return res.status(400).json({ error: "Topic, subject, and userId are required" });
      }

      const user = await storage.getUser(userId);
      if (!user) {
        return res.status(404).json({ error: "User not found" });
      }

      // Get Gemini API key from environment
      const geminiApiKey = process.env.GEMINI_API_KEY || process.env.GOOGLE_GEMINI_API_KEY || "";
      
      if (!geminiApiKey) {
        return res.status(500).json({ error: "Gemini API key not configured" });
      }

      // Create prompt for Gemini API
      const prompt = `Create an educational comic story for a ${user.age} year old child in class ${user.class} about ${topic} in ${subject}. 
      The child's favorite cartoons are: ${user.favoriteCartoons.join(", ")}.
      
      Create a story with 4 panels that teaches the concept through fun characters. Each panel should have:
      - A character name and emoji
      - Educational dialogue that explains the concept
      - Make it engaging and age-appropriate
      
      Format the response as a JSON object with:
      {
        "title": "Story title",
        "panels": [
          {
            "character": "😊",
            "characterName": "Character Name",
            "text": "Educational dialogue",
            "background": "bg-yellow-50"
          }
        ]
      }`;

      // Call Gemini API
      const geminiResponse = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${geminiApiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }]
        })
      });

      if (!geminiResponse.ok) {
        console.error('Gemini API error:', await geminiResponse.text());
        return res.status(500).json({ error: "Failed to generate story from Gemini API" });
      }

      const geminiData = await geminiResponse.json();
      
      if (!geminiData.candidates || geminiData.candidates.length === 0) {
        return res.status(500).json({ error: "No story generated by Gemini API" });
      }

      const storyText = geminiData.candidates[0].content.parts[0].text;
      
      // Try to parse JSON from the response
      let storyData;
      try {
        // Clean the response to extract JSON
        const jsonMatch = storyText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          storyData = JSON.parse(jsonMatch[0]);
        } else {
          throw new Error("No JSON found in response");
        }
      } catch (parseError) {
        // Fallback: create a basic story structure
        storyData = {
          title: `Learning ${topic}`,
          panels: [
            {
              character: "🧙‍♂️",
              characterName: "Wise Wizard",
              text: `Welcome! Today we're going to learn about ${topic} in ${subject}. This is going to be fun and exciting!`,
              background: "bg-yellow-50"
            },
            {
              character: "🐰",
              characterName: "Curious Bunny",
              text: `Oh wow! I've always wondered about ${topic}. Can you teach me more about it?`,
              background: "bg-pink-50"
            },
            {
              character: "🧙‍♂️",
              characterName: "Wise Wizard",
              text: `Of course! ${topic} is really important in ${subject}. Let me explain it in a simple way...`,
              background: "bg-blue-50"
            },
            {
              character: "🐰",
              characterName: "Curious Bunny",
              text: `That makes so much sense now! Thank you for teaching me about ${topic}. I feel much smarter!`,
              background: "bg-green-50"
            }
          ]
        };
      }

      // Save the story to storage
      const storyInput = insertStorySchema.parse({
        userId,
        subject,
        topic,
        title: storyData.title,
        content: storyText,
        panels: storyData.panels,
        isLearned: false
      });

      const savedStory = await storage.createStory(storyInput);

      // Update user progress
      const progress = await storage.getUserProgress(userId);
      if (progress) {
        const currentSubjectProgress = progress.subjectProgress[subject] || {
          storiesCompleted: 0,
          topicsLearned: [],
          timeSpent: 0
        };

        const updatedSubjectProgress = {
          ...progress.subjectProgress,
          [subject]: {
            ...currentSubjectProgress,
            storiesCompleted: currentSubjectProgress.storiesCompleted + 1,
            topicsLearned: [...new Set([...currentSubjectProgress.topicsLearned, topic])],
            timeSpent: currentSubjectProgress.timeSpent + 5 // Assume 5 minutes per story
          }
        };

        await storage.updateUserProgress(userId, {
          totalStoriesRead: progress.totalStoriesRead + 1,
          totalTimeSpent: progress.totalTimeSpent + 5,
          subjectProgress: updatedSubjectProgress,
          lastActiveDate: new Date()
        });

        // Check for achievements
        const totalStories = progress.totalStoriesRead + 1;
        const userAchievements = await storage.getAchievementsByUser(userId);
        const achievementTypes = userAchievements.map(a => a.type);

        // First story achievement
        if (totalStories === 1 && !achievementTypes.includes('first_story')) {
          await storage.createAchievement({
            userId,
            type: 'first_story',
            name: 'First Adventure',
            description: 'Completed your very first story!',
            icon: '🎯'
          });
        }

        // Subject master achievements
        const subjectStoriesCount = updatedSubjectProgress[subject].storiesCompleted;
        if (subjectStoriesCount >= 5 && !achievementTypes.includes(`${subject.toLowerCase()}_master`)) {
          await storage.createAchievement({
            userId,
            type: `${subject.toLowerCase()}_master`,
            name: `${subject} Master`,
            description: `Completed 5 stories in ${subject}!`,
            icon: subject === 'Math' ? '🧮' : subject === 'Science' ? '🔬' : '📖'
          });
        }
      }

      res.json(savedStory);
    } catch (error) {
      console.error('Story generation error:', error);
      res.status(500).json({ error: "Failed to generate story" });
    }
  });

  // Story routes
  app.get("/api/stories/user/:userId", async (req, res) => {
    try {
      const stories = await storage.getStoriesByUser(parseInt(req.params.userId));
      res.json(stories);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch stories" });
    }
  });

  app.get("/api/stories/user/:userId/subject/:subject", async (req, res) => {
    try {
      const stories = await storage.getStoriesBySubject(
        parseInt(req.params.userId),
        req.params.subject
      );
      res.json(stories);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch stories" });
    }
  });

  app.get("/api/stories/:id", async (req, res) => {
    try {
      const story = await storage.getStory(parseInt(req.params.id));
      if (!story) {
        return res.status(404).json({ error: "Story not found" });
      }
      res.json(story);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch story" });
    }
  });

  app.put("/api/stories/:id", async (req, res) => {
    try {
      const storyId = parseInt(req.params.id);
      const updates = insertStorySchema.partial().parse(req.body);
      const story = await storage.updateStory(storyId, updates);
      res.json(story);
    } catch (error) {
      res.status(400).json({ error: error instanceof Error ? error.message : "Invalid update data" });
    }
  });

  // Textbook routes
  app.get("/api/textbooks/user/:userId", async (req, res) => {
    try {
      const textbooks = await storage.getTextbooksByUser(parseInt(req.params.userId));
      res.json(textbooks);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch textbooks" });
    }
  });

  app.post("/api/textbooks", async (req, res) => {
    try {
      const textbookData = insertTextbookSchema.parse(req.body);
      const textbook = await storage.createTextbook(textbookData);
      res.json(textbook);
    } catch (error) {
      res.status(400).json({ error: error instanceof Error ? error.message : "Invalid textbook data" });
    }
  });

  app.post("/api/textbooks/:id/stories/:storyId", async (req, res) => {
    try {
      const textbookId = parseInt(req.params.id);
      const storyId = parseInt(req.params.storyId);
      const textbook = await storage.addStoryToTextbook(textbookId, storyId);
      res.json(textbook);
    } catch (error) {
      res.status(400).json({ error: "Failed to add story to textbook" });
    }
  });

  // Achievement routes
  app.get("/api/achievements/user/:userId", async (req, res) => {
    try {
      const achievements = await storage.getAchievementsByUser(parseInt(req.params.userId));
      res.json(achievements);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch achievements" });
    }
  });

  // Progress routes
  app.get("/api/progress/user/:userId", async (req, res) => {
    try {
      const progress = await storage.getUserProgress(parseInt(req.params.userId));
      if (!progress) {
        return res.status(404).json({ error: "Progress not found" });
      }
      res.json(progress);
    } catch (error) {
      res.status(500).json({ error: "Failed to fetch progress" });
    }
  });

  // Chatbot route (simple responses for now)
  app.post("/api/chatbot", async (req, res) => {
    try {
      const { message, context } = req.body;
      
      // Simple rule-based responses for educational questions
      const responses = {
        fraction: "Great question about fractions! Think of fractions like sharing pizza. If you cut a pizza into 4 equal pieces and take 1 piece, you have 1/4 of the pizza! 🍕",
        math: "Math is all around us! It helps us count, measure, and solve problems. What specific math topic would you like to learn about?",
        science: "Science helps us understand how the world works! From why the sky is blue to how plants grow. What interests you most?",
        default: "That's a wonderful question! I'm here to help you learn. Can you tell me more about what you're trying to understand?"
      };

      let response = responses.default;
      const lowerMessage = message.toLowerCase();

      if (lowerMessage.includes('fraction')) {
        response = responses.fraction;
      } else if (lowerMessage.includes('math') || lowerMessage.includes('number')) {
        response = responses.math;
      } else if (lowerMessage.includes('science')) {
        response = responses.science;
      }

      res.json({ response });
    } catch (error) {
      res.status(500).json({ error: "Failed to process question" });
    }
  });

  const httpServer = createServer(app);
  return httpServer;
}
